#!/usr/bin/env python3
import pandas as pd
import sys,os
import seaborn as sns
import matplotlib.pyplot as plt

if len(sys.argv) <= 1:
    sys.exit(f'Usage: {sys.argv[0]} table_file<csv> annotation_table<csv>\nWorks with filtered table generated by blast_contiguous_segments.py ')
if len(sys.argv) > 2:
    annotationTable = sys.argv[2]
    annotate=True
else:
    annotate=False

table = sys.argv[1]
outputPrefix = os.path.splitext(table)[0]
tb = pd.read_csv(table)


if annotate:
    print('Works with NCBI tsv table with fields: Assembly Accession, Organism Name and Organism Infraspecific Names Strain...')
    annotationTb = pd.read_csv(annotationTable,sep='\t')
    if len(annotationTb.columns) <= 1:
        sys.exit('Annotation table must be csv or tsv format...')
    annotationTb = annotationTb[['Assembly Accession','Organism Name', 'Organism Infraspecific Names Strain']]
    #
    rename = { r['Assembly Accession']:f"{r['Organism Name']} {r['Organism Infraspecific Names Strain']}" for _i,r in annotationTb.iterrows()}
    #
    tb['sseqid'] = [rename[sid] for sid in tb['sseqid']] 

clusters = tb['qseqid'].unique()
sequences = tb['sseqid'].unique()
matrixDict = pd.DataFrame(index=sequences,columns=clusters)
for _,r in tb.iterrows():
    if not r['missing']:
        matrixDict.loc[r['sseqid'],r['qseqid']] = 1
    else:
        matrixDict.loc[r['sseqid'],r['qseqid']] = 0

df = matrixDict[matrixDict.columns].astype(float)  # or int

df.to_csv('cluster_presence_absence.csv')
height = int(len(sequences)*.3)
width = max(6,int(len(clusters)*.2))

sns.set_theme(font_scale=0.8)

kws = dict(cbar_kws=dict(ticks=[0, 0.50, 1], orientation='horizontal'))

g = sns.clustermap(
    df,
    figsize=(width, height),
    row_cluster=True,
    col_cluster=False,
    #yticklabels=False,
    #dendrogram_ratio=(.1, .2),
    cmap="Blues",
    #cbar_pos=(0, .2, .03, .4),
    **kws
)

x0, _y0, _w, _h = g.cbar_pos
g.ax_cbar.set_position([x0, 0.9, g.ax_row_dendrogram.get_position().width, 0.02])
g.ax_cbar.set_title('Color scale')
g.ax_cbar.tick_params(axis='x', length=10)
for spine in g.ax_cbar.spines:
    g.ax_cbar.spines[spine].set_color('black')
    g.ax_cbar.spines[spine].set_linewidth(1)

plt.savefig(f"{outputPrefix}_pa_clustermap.svg")
plt.close()
